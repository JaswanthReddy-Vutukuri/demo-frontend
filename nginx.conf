events {}

http {
  server {
    listen 80;
    server_name localhost;

    # Serve Angular app files
    root /usr/share/nginx/html;
    index index.html;

    # Route all requests to Angular app except API calls
    location / {
      try_files $uri $uri/ /index.html;
    }

    # Proxy API requests for todos to todo-service container
    location /api/todos {
      proxy_pass http://todo-service:38799;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection keep-alive;
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    # Proxy API requests for favorites to favorites-service container
    location /api/favorites {
      proxy_pass http://favorites-service:38204;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection keep-alive;
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
    }
  }
}

# 1. Enabling and Forcing HTTPS
# To serve your app securely over HTTPS and redirect all HTTP traffic to HTTPS:

# Create two server blocks:
# One listens on port 80 (HTTP) and redirects all requests to HTTPS.
# The other listens on port 443 (HTTPS) and serves your app.

# Example Nginx snippet:

# text
# Redirect all HTTP requests to HTTPS
# server {
#   listen 80;
#   server_name yourdomain.com www.yourdomain.com;

  # Redirect to HTTPS preserving the URI
  # return 301 https://$host$request_uri;
# }

# HTTPS server block
#   server {
#     listen 443 ssl;
#     server_name yourdomain.com www.yourdomain.com;

#     ssl_certificate /etc/ssl/certs/your_cert.pem;
#     ssl_certificate_key /etc/ssl/private/your_key.pem;

#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;

#     root /usr/share/nginx/html;
#     index index.html;

#     location / {
#       try_files $uri $uri/ /index.html;
#     }

#     location /api/todos {
#       proxy_pass http://todo-service:38799;
#       # proxy headers...
#     }

#     location /api/favorites {
#       proxy_pass http://favorites-service:38204;
#       # proxy headers...
#     }
#   }
# }

# Replace yourdomain.com and certificate paths with your actual domain and SSL cert files.

# Use certificates from Let’s Encrypt (free) or your certificate authority.

# This setup ensures all traffic is encrypted and users are redirected to HTTPS URLs.

# 2. Caching Static Assets
# ===========================
# To improve performance and reduce bandwidth, configure caching headers for static files (JS, CSS, images):

# text
# location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|ttf|svg|eot)$ {
#   expires 30d;                 # Cache these files for 30 days
#   add_header Cache-Control "public, no-transform";
#   access_log off;              # Optional: disable logging for static files
# }
# This tells browsers to cache these assets for 30 days, reducing load times on repeat visits.

# Adjust the expires duration based on your deployment frequency.

# 3. Gzip Compression
# ===========================
# Enable gzip compression to reduce response size:

# text
# http {
#   gzip on;
#   gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
#   gzip_min_length 256;
#   gzip_proxied any;
#   gzip_vary on;
# }
# Compresses text-based responses (HTML, CSS, JS, JSON).

# Improves load speed and reduces bandwidth.

# 4. Handling Angular Client-Side Routing
# ===========================
# Ensure all unknown routes serve index.html so Angular’s router can handle them:

# text
# location / {
#   try_files $uri $uri/ /index.html;
# }
# This prevents 404 errors when users refresh or directly access deep links.

# 5. Proxy Settings for Backend APIs
# ===========================
# Maintain these headers for WebSocket support and proper proxying:

# text
# proxy_http_version 1.1;
# proxy_set_header Upgrade $http_upgrade;
# proxy_set_header Connection 'upgrade';
# proxy_set_header Host $host;
# proxy_cache_bypass $http_upgrade;
# 6. Security Headers (Optional but Recommended)
# Add HTTP security headers to improve security:

# text
# add_header X-Content-Type-Options nosniff;
# add_header X-Frame-Options SAMEORIGIN;
# add_header X-XSS-Protection "1; mode=block";
# add_header Referrer-Policy no-referrer-when-downgrade;
# add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";